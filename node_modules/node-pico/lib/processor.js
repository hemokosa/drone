"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BUFFER_SIZE = 64;

var Processor = (function () {
  function Processor() {
    _classCallCheck(this, Processor);

    this.player = null;
    this.audioprocess = null;
    this.isPlaying = false;
    this.streams = null;
    this.buffers = null;
  }

  _createClass(Processor, [{
    key: "bind",
    value: function bind(Klass) {
      this.player = new Klass(this);
    }
  }, {
    key: "play",
    value: function play(audioprocess) {
      if (!this.isPlaying) {
        this.isPlaying = true;
        this.streams = [new Float32Array(this.player.bufferLength), new Float32Array(this.player.bufferLength)];
        this.buffers = [new Float32Array(BUFFER_SIZE), new Float32Array(BUFFER_SIZE)];
        this.audioprocess = audioprocess;
        this.player.play();
      }
    }
  }, {
    key: "pause",
    value: function pause() {
      if (this.isPlaying) {
        this.isPlaying = false;
        this.player.pause();
        this.streams = null;
        this.buffers = null;
        this.audioprocess = null;
      }
    }
  }, {
    key: "process",
    value: function process(bufL, bufR) {
      var audioprocess = this.audioprocess;
      var buffers = this.buffers;
      var bufferL = buffers[0];
      var bufferR = buffers[1];
      var n = bufL.length / BUFFER_SIZE;

      for (var i = 0; i < n; i++) {
        audioprocess({
          bufferSize: BUFFER_SIZE,
          buffers: buffers
        });
        bufL.set(bufferL, i * BUFFER_SIZE);
        bufR.set(bufferR, i * BUFFER_SIZE);
      }
    }
  }, {
    key: "env",
    get: function get() {
      return this.player.env;
    }
  }, {
    key: "sampleRate",
    get: function get() {
      return this.player.sampleRate;
    }
  }, {
    key: "bufferSize",
    get: function get() {
      return BUFFER_SIZE;
    }
  }]);

  return Processor;
})();

module.exports = Processor;